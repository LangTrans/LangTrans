pipe: <tab><f1>(<f2>)
arrow_fun: "<name> = lambda <args>:<statement>"
arrow: "lambda <arg>: <statement>"
fun_operation: <funs>
arrow2list: map(<fun>,<list>)
arrow_multline: lambda <args>:exec("""<statement>""")
print: <tab>print(<str>)
fun: def <name>
single_try: |-
  <tab>try:
  <tab>  <try_state>
  <tab>except <err> as err:
  <tab>  <except_state>
itself: <tab><var>=<var>.<rest>
ternary: <start><tru> if <bol> else <fals><end>
condition: |-
  <tab>if <bol>:
  <tab>  <name>(<args>)
notdefined: <var> if '<var>' in locals() else <value>
range: <comma>range(<start>,<end>+1)
jrange: range(<start>,<end>+1,<jump>)
listrange: list(<inside>)
chk_defined: "'<var>' not in locals()"
multiline_flow:  -><statements>
flow: <tab><fun>(<arg>) ->
endflow: <tab><fun>(<arg>)
scope: |
  <tab>def <name>():
  <statement>
  <tab><name>()
make: |
  <tab>def <name>():<tab2><block><tab2>return locals()
  <tab><name> = <callable>("<name>", (<tuple>), <name>())
make_dict: |
  <tab>def <name>():<tab2><block><tab2>return locals()
  <tab><name> = <name>()
